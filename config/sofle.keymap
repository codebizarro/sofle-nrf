/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    flavor = "hold-preferred";
    quick-tap-ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        new_combo {
            bindings = <&trans>;
            key-positions = <>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESC    &kp N1  &kp N2        &kp N3      &kp N4           &kp N5                               &kp N6     &kp N7     &kp N8           &kp N9     &kp N0    &kp MINUS
&kp TAB    &kp Q   &kp W         &kp E       &kp R            &kp T                                &kp Y      &kp U      &kp I            &kp O      &kp P     &kp LBKT
&kp LSHFT  &kp A   &kp S         &kp D       &kp F            &kp G                                &kp H      &kp J      &kp K            &kp L      &kp SEMI  &kp SQT
&kp LCTRL  &kp Z   &kp X         &kp C       &kp V            &kp B      &kp C_MUTE   &none        &kp N      &kp M      &kp COMMA        &kp DOT    &kp FSLH  &kp RBKT
                   &kp LEFT_WIN  &lt 3 LALT  &lt 2 BACKSPACE  &kp SPACE  &lt 1 ENTER  &lt 1 ENTER  &kp SPACE  &lt 2 DEL  &lt 3 RIGHT_ALT  &kp K_APP
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        lower_layer {
            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans     &kp F1     &kp F2       &kp F3     &kp F4     &kp F5                            &kp F6     &kp F7    &kp F8           &kp F9           &kp F10   &kp MINUS
&kp GRAVE  &kp N1     &kp N2       &kp N3     &kp N4     &kp N5                            &kp N6     &kp N7    &kp N8           &kp NUMBER_9     &kp N0    &kp F12
&trans     &kp EXCL   &kp AT       &kp HASH   &kp DLLR   &kp PRCNT                         &kp CARET  &kp AMPS  &kp KP_MULTIPLY  &kp LPAR         &kp RPAR  &kp PIPE
&trans     &kp EQUAL  &kp KP_PLUS  &kp MINUS  &kp UNDER  &kp C_PLAY_PAUSE  &trans  &trans  &kp LBKT   &kp RBKT  &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp BSLH  &trans
                      &trans       &trans     &trans     &trans            &trans  &trans  &trans     &trans    &trans           &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>,
                <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |       |      |       |       |
            // |     | ALT  | CTRL | SHIFT |       | CAPS |                |  <-  |   ^  |   v   |  ->  |  DEL  | BKSPC |
            // |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //              |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&bt BT_CLR       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4                  &kp KP_NUMLOCK  &kp KP_DIVIDE  &kp STAR      &kp MINUS  &trans           &trans
&kp PRINTSCREEN  &kp HOME      &kp UP        &kp END       &kp PAGE_UP       &kp KP_NUM                    &kp NUMBER_7    &kp NUMBER_8   &kp NUMBER_9  &kp PLUS   &kp PRINTSCREEN  &trans
&trans           &kp LEFT      &kp DOWN      &kp RIGHT     &kp PAGE_DOWN     &kp CLCK                      &kp NUMBER_4    &kp NUMBER_5   &kp NUMBER_6  &kp EQUAL  &kp DEL          &kp BSPC
&trans           &trans        &trans        &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &trans  &trans  &kp NUMBER_1    &kp NUMBER_2   &kp NUMBER_3  &trans     &trans           &trans
                               &trans        &trans        &trans            &trans        &trans  &trans  &trans          &trans         &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        Layer__3 {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &trans        &trans                        &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                        &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                          &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
